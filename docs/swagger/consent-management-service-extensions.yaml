openapi: 3.0.1
info:
  title: API contract for Service Extensions of Consent Management API
  description: This API defines the REST API contract for services that implements logic to extend the Consent Management API.
  contact:
    name: WSO2
    url: https://wso2.com/solutions/financial-services/open-banking/
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: v1.0.0
servers:
  - url: https://{km_host}:{km_port}/api/services
    description: SwaggerHub API Auto Mocking
security:
  - BasicAuth: []
  - OAuth2: []
tags:
  - name: Consent
    description: APIs for consent flow extensions
  - name: Error Handling
    description: APIs for handling accelerator errors
paths:
  /pre-process-consent-creation:
    post:
      tags:
        - Consent
      summary: handle pre validations & obtain custom consent data to be stored
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentCreationRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForPreProcessConsentCreation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /enrich-consent-creation-response:
    post:
      tags:
        - Consent
      summary: "handle post-consent generation -response generation,validations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrichConsentCreationRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForResponseAlternation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-consent-retrieval:
    post:
      tags:
        - Consent
      summary: handle pre-consent retrieval validations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForResponseAlternation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-consent-update:
    post:
      tags:
        - Consent
      summary: handle consent update pre validations & obtain custom consent data to be stored
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentUpdateRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForPreProcessConsentUpdate'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /enrich-consent-update-response:
    post:
      tags:
        - Consent
      summary: "handle post-consent update -response generation,validations"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrichConsentUpdateRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForResponseAlternation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-consent-revoke:
    post:
      tags:
        - Consent
      summary: handle pre-consent revocation validations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentRevokeRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForConsentRevocation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-consent-file-upload:
    post:
      tags:
        - Consent
      summary: Handle pre validations related to file upload requests.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessFileUploadRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForPreProcessFileUpload'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /enrich-consent-file-response:
    post:
      tags:
        - Consent
      summary: Modify the response sent in the file upload request after successfully storig the file.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrichFileUploadResponseRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForResponseAlternation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /validate-consent-file-retrieval:
    post:
      tags:
        - Consent
      summary: Handle validations related to file retrieval and return a response
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessConsentRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /pre-process-consent-file-update:
    post:
      tags:
        - Consent
      summary: Handle pre validations related to file update requests.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreProcessFileUploadRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForPreProcessFileUpload'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                data:
                  errorMessage: invalid_request
                  errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /enrich-consent-file-update-response:
    post:
      tags:
        - Consent
      summary: Modify the response sent in the file update request after successfully replacing the file.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrichFileUploadResponseRequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForResponseAlternation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                status: ERROR
                errorMessage: server_error
                errorDescription: Failed to process the response
  /map-accelerator-error-response:
    post:
      tags:
        - Error Handling
      summary: map accelerator level error formats to custom error formats
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorMapperRequestBody'
            example:
              requestId: Ec1wMjmiG8
              data:
                error:
                  code: "401"
                  description: Invalid client ID provided.
                  operation: consent_create
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response200ForErrorMapper'
              example:
                responseId: Ec1wMjmiG8
                errorCode: 400
                data:
                  customErrorCode: invalid
                  customErrorDescription: Invalid client ID provided.
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                errorMessage: invalid_request
                errorDescription: Data is missing
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                responseId: Ec1wMjmiG8
                errorMessage: server_error
                errorDescription: Failed to process the response
components:
  schemas:
    Response200ForErrorMapper:
      type: object
      properties:
        responseId:
          type: string
        errorCode:
          type: integer
        data:
          type: object
          description: Defines the custom error response.
    ErrorMapperRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/ErrorMapperData'
    ErrorMapperData:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      description: Defines the context data related to the errors.
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code identifying the specific issue.
        description:
          type: string
          description: Detailed description of the error.
        operation:
          type: string
          description: The operation where the error occurred.
      description: Defines an error object with details.
    UpdateRequest:
      type: object
      properties:
        consentInitiationData:
          type: object
          description: The initiation payload used by third parties which includes detailed information on data access request.
          properties:
            type:
              description: The type of consent (e.g., 'accounts', 'payments').
              type: string
              example: "accounts"
            status:
              description: The current status of the consent in its lifecycle (e.g., 'AwaitingAuthorisation', 'authorised', 'revoked', 'expired').
              type: string
              example: "AwaitingAuthorisation"
            validityTime:
              description: The duration for which the consent is valid, in seconds. '0' may indicate it does not expire automatically.
              type: integer
              format: int64
              example: 0
            recurringIndicator:
              description: A boolean flag indicating if the consent is for a recurring payment or access.
              type: boolean
              example: false
            frequency:
              description: For recurring consents, this indicates the frequency (e.g., per day). '0' may indicate no limit.
              type: integer
              format: int32
              example: 0
            dataAccessValidityDuration:
              description: The duration for which data access is valid, in seconds. Optional field that specifies how long the consent allows access to user data.
              type: integer
              format: int64
              example: 86400
            requestPayload:
              description: The original consent initiation request payload from the TPP.
              type: object
            attributes:
              description: A key-value map of additional, non-standard attributes associated with the consent.
              type: object
              properties:
                key:
                  type: string
            authorizations:
              description: An array of authorization resources linked to this consent, detailing which users have acted upon it.
              type: array
              items:
                $ref: "#/components/schemas/ConsentAuthorizationCreatePayload"
            fileContent:
              description: File content
              type: string
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
    Request:
      type: object
      properties:
        consentInitiationData:
          type: object
          description: The initiation payload used by third parties which includes detailed information on data access request.
          properties:
            type:
              description: The type of consent (e.g., 'accounts', 'payments').
              type: string
              example: "accounts"
            status:
              description: The current status of the consent in its lifecycle (e.g., 'AwaitingAuthorisation', 'authorised', 'revoked', 'expired').
              type: string
              example: "AwaitingAuthorisation"
            validityTime:
              description: The duration for which the consent is valid, in seconds. '0' may indicate it does not expire automatically.
              type: integer
              format: int64
              example: 0
            recurringIndicator:
              description: A boolean flag indicating if the consent is for a recurring payment or access.
              type: boolean
              example: false
            frequency:
              description: For recurring consents, this indicates the frequency (e.g., per day). '0' may indicate no limit.
              type: integer
              format: int32
              example: 0
            dataAccessValidityDuration:
              description: The duration for which data access is valid, in seconds. Optional field that specifies how long the consent allows access to user data.
              type: integer
              format: int64
              example: 86400
            requestPayload:
              description: The original consent initiation request payload from the TPP.
              type: object
            attributes:
              description: A key-value map of additional, non-standard attributes associated with the consent.
              type: object
              properties:
                key:
                  type: string
            authorizations:
              description: An array of authorization resources linked to this consent, detailing which users have acted upon it.
              type: array
              items:
                $ref: "#/components/schemas/ConsentAuthorizationCreatePayload"
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
    ConsentAuthorizationCreatePayload:
      type: object
      description: Represents a detaild authorization object.
      properties:
        userId:
          description: The unique ID of the user who performed this authorization.
          type: string
          example: "admin@carbon.super"
        type:
          description: The type of authorization (e.g., 'authorisation', 're-authorisation').
          type: string
          example: "authorisation"
        status:
          description: The current status of this specific authorization (e.g., 'created', 'authorised', 'rejected').
          type: string
          example: "created"
        resource:
          description: Additional resource data related to the authorization.
          type: object
    RequestForEnrichConsentCreationResponse:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/StoredDetailedConsentResourceData'
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
    RequestForEnrichConsentUpdateResponse:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/StoredDetailedConsentResourceDataForUpdate'
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
    RequestForPreProcessFileUpload:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/StoredDetailedConsentResourceData'
        fileContent:
          type: string
          description: content of the uploaded file
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
    RequestForEnrichFileUploadResponse:
      type: object
      properties:
        consentId:
          type: string
          description: To identify consent.
        fileUploadCreatedTime:
          type: string
          description: Timestamp which the file was stored in the database.
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
        fileContent:
          description: File content
          type: string
    PreProcessConsentRetrievalData:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/StoredBasicConsentResourceData'
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
    PreProcessConsentRevokeData:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/StoredBasicConsentResourceDataForRevoke'
        requestHeaders:
          $ref: '#/components/schemas/RequestHeaders'
        requestBody:
          $ref: '#/components/schemas/RevokeRequestBody'  
    SuccessResponse:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
    SuccessResponseConsentRevocation:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseConsentRevocationData'
    SuccessResponseForResponseAlternation:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseForResponseAlternationData'
    SuccessResponsePreProcessConsentCreation:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponseWithDetailedConsentData'
    SuccessResponsePreProcessFileUpload:
      type: object
      properties:
        responseId:
          type: string
        status:
          type: string
          enum:
            - SUCCESS
        data:
          $ref: '#/components/schemas/SuccessResponsePreProcessFileUploadData'
    FailedResponse:
      required:
        - data
        - errorCode
        - status
      type: object
      properties:
        status:
          type: string
          description: "Indicates the outcome of the request. For a failed operation, this should be set to ERROR."
          enum:
            - ERROR
        errorCode:
          type: integer
          description: If any custom error code to return.
        data:
          type: object
          description: :"Custom error object to response back"
    ErrorResponse:
      required:
        - data
        - status
      type: object
      properties:
        status:
          type: string
          description: "Indicates the outcome of the request. For an error operation, this should be set to ERROR."
          enum:
            - ERROR
        data:
          type: object
          description: :"Custom error object to response back"
    PreProcessConsentUpdateRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/UpdateRequest'
    PreProcessConsentCreationRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/Request'
    EnrichConsentUpdateRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/RequestForEnrichConsentUpdateResponse'
    EnrichConsentCreationRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/RequestForEnrichConsentCreationResponse'
    EnrichFileUploadResponseRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/RequestForEnrichFileUploadResponse'
    PreProcessFileUploadRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/RequestForPreProcessFileUpload'
    PreProcessConsentRevokeRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PreProcessConsentRevokeData'
    PreProcessConsentRequestBody:
      type: object
      properties:
        requestId:
          type: string
          description: A unique correlation identifier
          example: Ec1wMjmiG8
        data:
          $ref: '#/components/schemas/PreProcessConsentRetrievalData'
    Response200ForPreProcessConsentUpdate:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponsePreProcessConsentCreation'
        - $ref: '#/components/schemas/FailedResponse'
    Response200ForPreProcessConsentCreation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponsePreProcessConsentCreation'
        - $ref: '#/components/schemas/FailedResponse'
    Response200ForPreProcessFileUpload:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponsePreProcessFileUpload'
        - $ref: '#/components/schemas/FailedResponse'
    Response200ForResponseAlternation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseForResponseAlternation'
        - $ref: '#/components/schemas/FailedResponse'
    Response200:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - $ref: '#/components/schemas/FailedResponse'
    Response200ForConsentRevocation:
      oneOf:
        - $ref: '#/components/schemas/SuccessResponseConsentRevocation'
        - $ref: '#/components/schemas/FailedResponse'
    SuccessResponseConsentRevocationData:
      type: object
      properties:
        actionBy:
          description: Identifier of the user or system performing the delete/revoke action.
          type: string
          example: "admin@wso2.com"
        revocationReason:
          description: The reason for revoking the consent.
          type: string
          example: "Admin revoke"
        revokedConsentStatus:
          description: The status to set for the consent upon revocation.
          type: string
          example: "revoked"
    SuccessResponseForResponseAlternationData:
      type: object
      properties:
        responseHeaders:
          type: object
          description: Headers to be included in the response.
        modifiedResponse:
          type: object
          description: Generated custom response body
    SuccessResponseWithDetailedConsentData:
      type: object
      properties:
        consentResource:
          $ref: '#/components/schemas/DetailedConsentResourceData'
        resolvedConsentPurposes:
          type: array
          description: Array of resolved consent purpose IDs that are associated with this consent
          items:
            type: string
          example: ["PURPOSE-001", "PURPOSE-002"]
    SuccessResponsePreProcessFileUploadData:
      type: object
      properties:
        consentStatus:
          type: string
          description: "New consent status after the file upload is successful."
        userId:
          type: string
          description: "Id of the user doing the file upload. Used for auditing purposes."
    DetailedConsentResourceData:
      type: object
      properties:
        type:
          description: The type of consent (e.g., 'accounts', 'payments').
          type: string
          example: "accounts"
        status:
          description: The current status of the consent in its lifecycle (e.g., 'AwaitingAuthorisation', 'authorised', 'revoked', 'expired').
          type: string
          example: "AwaitingAuthorisation"
        validityTime:
          description: The duration for which the consent is valid, in seconds. '0' may indicate it does not expire automatically.
          type: integer
          format: int64
          example: 0
        recurringIndicator:
          description: A boolean flag indicating if the consent is for a recurring payment or access.
          type: boolean
          example: false
        frequency:
          description: For recurring consents, this indicates the frequency (e.g., per day). '0' may indicate no limit.
          type: integer
          format: int32
          example: 0
        dataAccessValidityDuration:
          description: The duration for which data access is valid, in seconds. Optional field that specifies how long the consent allows access to user data.
          type: integer
          format: int64
          example: 86400
        requestPayload:
          description: The original consent initiation request payload from the TPP.
          type: object
        attributes:
          description: A key-value map of additional, non-standard attributes associated with the consent.
          type: object
          properties:
            key:
              type: string
        authorizations:
          description: An array of authorization resources linked to this consent, detailing which users have acted upon it.
          type: array
          items:
            $ref: "#/components/schemas/ConsentAuthorizationCreatePayload"
    StoredBasicConsentResourceData:
      type: object
      properties:
        id:
          description: Consent Id
          type: string
          example: "consent_id"
        requestPayload:
          description: The original consent initiation request payload from the TPP.
          type: object
        createdTime:
          type: integer
          format: int32
        updatedTime:
          type: integer
          format: int32
        clientId:
          type: string
        type:
          description: The type of consent (e.g., 'accounts', 'payments').
          type: string
          example: "accounts"
        status:
          description: The current status of the consent in its lifecycle (e.g., 'AwaitingAuthorisation', 'authorised', 'revoked', 'expired').
          type: string
          example: "AwaitingAuthorisation"
        frequency:
          description: For recurring consents, this indicates the frequency (e.g., per day). '0' may indicate no limit.
          type: integer
          format: int32
          example: 0
        validityTime:
          description: The duration for which the consent is valid, in seconds. '0' may indicate it does not expire automatically.
          type: integer
          format: int64
          example: 0
        recurringIndicator:
          description: A boolean flag indicating if the consent is for a recurring payment or access.
          type: boolean
          example: false
        dataAccessValidityDuration:
          description: The duration for which data access is valid, in seconds. Optional field that specifies how long the consent allows access to user data.
          type: integer
          format: int64
          example: 86400
        attributes:
          description: A key-value map of additional, non-standard attributes associated with the consent.
          type: object
          properties:
            key:
              type: string
        authorizations:
          description: An array of authorization resources linked to this consent, detailing which users have acted upon it.
          type: array
          items:
            $ref: "#/components/schemas/ConsentAuthorizationCreateResponse"
        fileContent:
          description: File content
          type: string
    StoredBasicConsentResourceDataForRevoke:
      type: object
      properties:
        id:
          description: Consent Id
          type: string
          example: "consent_id"
        requestPayload:
          description: The original consent initiation request payload from the TPP.
          type: object
        createdTime:
          type: integer
          format: int32
        updatedTime:
          type: integer
          format: int32
        clientId:
          type: string
        type:
          description: The type of consent (e.g., 'accounts', 'payments').
          type: string
          example: "accounts"
        status:
          description: The current status of the consent in its lifecycle (e.g., 'AwaitingAuthorisation', 'authorised', 'revoked', 'expired').
          type: string
          example: "AwaitingAuthorisation"
        frequency:
          description: For recurring consents, this indicates the frequency (e.g., per day). '0' may indicate no limit.
          type: integer
          format: int32
          example: 0
        validityTime:
          description: The duration for which the consent is valid, in seconds. '0' may indicate it does not expire automatically.
          type: integer
          format: int64
          example: 0
        recurringIndicator:
          description: A boolean flag indicating if the consent is for a recurring payment or access.
          type: boolean
          example: false
        dataAccessValidityDuration:
          description: The duration for which data access is valid, in seconds. Optional field that specifies how long the consent allows access to user data.
          type: integer
          format: int64
          example: 86400
        attributes:
          description: A key-value map of additional, non-standard attributes associated with the consent.
          type: object
          properties:
            key:
              type: string
        authorizations:
          description: An array of authorization resources linked to this consent, detailing which users have acted upon it.
          type: array
          items:
            $ref: "#/components/schemas/ConsentAuthorizationCreateResponse"
        fileContent:
          description: File content
          type: string
    RevokeRequestBody:
      type: object
      properties:
        actionBy:
          description: Identifier of the user or system performing the delete/revoke action.
          type: string
          example: "admin@wso2.com"
        revocationReason:
          description: The reason for revoking the consent.
          type: string
          example: "Admin revoke"
        revokedConsentStatus:
          description: The status to set for the consent upon revocation.
          type: string
          example: "revoked"
    StoredDetailedConsentResourceData:
      type: object
      properties:
        id:
          description: Consent Id
          type: string
          example: "consent_id"
        requestPayload:
          description: The original consent initiation request payload from the TPP.
          type: object
        createdTime:
          type: integer
          format: int32
        updatedTime:
          type: integer
          format: int32
        clientId:
          type: string
        type:
          description: The type of consent (e.g., 'accounts', 'payments').
          type: string
          example: "accounts"
        status:
          description: The current status of the consent in its lifecycle (e.g., 'AwaitingAuthorisation', 'authorised', 'revoked', 'expired').
          type: string
          example: "AwaitingAuthorisation"
        frequency:
          description: For recurring consents, this indicates the frequency (e.g., per day). '0' may indicate no limit.
          type: integer
          format: int32
          example: 0
        validityTime:
          description: The duration for which the consent is valid, in seconds. '0' may indicate it does not expire automatically.
          type: integer
          format: int64
          example: 0
        recurringIndicator:
          description: A boolean flag indicating if the consent is for a recurring payment or access.
          type: boolean
          example: false
        dataAccessValidityDuration:
          description: The duration for which data access is valid, in seconds. Optional field that specifies how long the consent allows access to user data.
          type: integer
          format: int64
          example: 86400
        attributes:
          description: A key-value map of additional, non-standard attributes associated with the consent.
          type: object
          properties:
            key:
              type: string
        authorizations:
          description: An array of authorization resources linked to this consent, detailing which users have acted upon it.
          type: array
          items:
            $ref: "#/components/schemas/ConsentAuthorizationCreateResponse"
    StoredDetailedConsentResourceDataForUpdate:
      type: object
      properties:
        id:
          description: Consent Id
          type: string
          example: "consent_id"
        requestPayload:
          description: The original consent initiation request payload from the TPP.
          type: object
        createdTime:
          type: integer
          format: int32
        updatedTime:
          type: integer
          format: int32
        clientId:
          type: string
        type:
          description: The type of consent (e.g., 'accounts', 'payments').
          type: string
          example: "accounts"
        status:
          description: The current status of the consent in its lifecycle (e.g., 'AwaitingAuthorisation', 'authorised', 'revoked', 'expired').
          type: string
          example: "AwaitingAuthorisation"
        frequency:
          description: For recurring consents, this indicates the frequency (e.g., per day). '0' may indicate no limit.
          type: integer
          format: int32
          example: 0
        validityTime:
          description: The duration for which the consent is valid, in seconds. '0' may indicate it does not expire automatically.
          type: integer
          format: int64
          example: 0
        recurringIndicator:
          description: A boolean flag indicating if the consent is for a recurring payment or access.
          type: boolean
          example: false
        dataAccessValidityDuration:
          description: The duration for which data access is valid, in seconds. Optional field that specifies how long the consent allows access to user data.
          type: integer
          format: int64
          example: 86400
        attributes:
          description: A key-value map of additional, non-standard attributes associated with the consent.
          type: object
          properties:
            key:
              type: string
        authorizations:
          description: An array of authorization resources linked to this consent, detailing which users have acted upon it.
          type: array
          items:
            $ref: "#/components/schemas/ConsentAuthorizationCreateResponse"
        fileContent:
          description: File content
          type: string
    ConsentAuthorizationCreateResponse:
      type: object
      description: Represents a detaild authorization object.
      properties:
        id:
          description: Auth Id
          type: string
          example: "auth_id"
        userId:
          description: The unique ID of the user who performed this authorization.
          type: string
          example: "admin@carbon.super"
        type:
          description: The type of authorization (e.g., 'authorisation', 're-authorisation').
          type: string
          example: "authorisation"
        status:
          description: The current status of this specific authorization (e.g., 'created', 'authorised', 'rejected').
          type: string
          example: "created"
        updatedTime:
          type: integer
          format: int32
        resource:
          description: Additional resource data related to the authorization.
          type: object
    RequestHeaders:
      type: object
      description: Request headers sent by the TPP. Filtered set of headers are sent to the external service.
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            process: process request generate response
